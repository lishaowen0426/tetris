//
//  dataStruc.cpp
//  newTetris
//
//  Created by lishaowen on 18/06/2017.
//  Copyright Â© 2017 lishaowen. All rights reserved.
//

#include <stdio.h>
#include <SDL2/SDL.h>
#include <SDL2_image/SDL_image.h>
#include "tetrisHeader.h"

const char pieces[7/*kinds*/][4 /*rotation*/][5 /*vertical*/][5/*horizontal*/]=
{
    //I
    {
        {
            {0,0,0,0,0},
            {0,0,0,0,0},
            {0,1,2,1,1},
            {0,0,0,0,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,1,0,0},
            {0,0,2,0,0},
            {0,0,1,0,0},
            {0,0,1,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,0,0,0},
            {1,1,2,1,0},
            {0,0,0,0,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,1,0,0},
            {0,0,1,0,0},
            {0,0,2,0,0},
            {0,0,1,0,0},
            {0,0,0,0,0}
        }
        
    },
    //L
    {
        {
            {0,0,0,0,0},
            {0,0,1,0,0},
            {0,0,2,0,0},
            {0,0,1,1,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,0,0,0},
            {0,1,2,1,0},
            {0,1,0,0,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,1,1,0,0},
            {0,0,2,0,0},
            {0,0,1,0,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,0,1,0},
            {0,1,2,1,0},
            {0,0,0,0,0},
            {0,0,0,0,0}
        }
        
    },
    //square
    {
        {
            {0,0,0,0,0},
            {0,0,0,0,0},
            {0,0,2,1,0},
            {0,0,1,1,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,0,0,0},
            {0,0,2,1,0},
            {0,0,1,1,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,0,0,0},
            {0,0,2,1,0},
            {0,0,1,1,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,0,0,0},
            {0,0,2,1,0},
            {0,0,1,1,0},
            {0,0,0,0,0}
        }
        
    },
    //L mirrored
    {
        {
            {0,0,0,0,0},
            {0,0,1,0,0},
            {0,0,2,0,0},
            {0,1,1,0,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,1,0,0,0},
            {0,1,2,1,0},
            {0,0,0,0,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,1,1,0},
            {0,0,2,0,0},
            {0,0,1,0,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,0,0,0},
            {0,1,2,1,0},
            {0,0,0,1,0},
            {0,0,0,0,0}
        }
        
    },
    //N
    {
        {
            {0,0,0,0,0},
            {0,0,0,1,0},
            {0,0,2,1,0},
            {0,0,1,0,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,0,0,0},
            {0,1,2,0,0},
            {0,0,1,1,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,1,0,0},
            {0,1,2,0,0},
            {0,1,0,0,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,1,1,0,0},
            {0,0,2,1,0},
            {0,0,0,0,0},
            {0,0,0,0,0}
        }
        
    },
    //N mirrored
    {
        {
            {0,0,0,0,0},
            {0,0,1,0,0},
            {0,0,2,1,0},
            {0,0,0,1,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,0,0,0},
            {0,0,2,1,0},
            {0,1,1,0,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,1,0,0,0},
            {0,1,2,0,0},
            {0,0,1,0,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,1,1,0},
            {0,1,2,0,0},
            {0,0,0,0,0},
            {0,0,0,0,0}
        }
        
    },
    //T
    {
        {
            {0,0,0,0,0},
            {0,0,1,0,0},
            {0,0,2,1,0},
            {0,0,1,0,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,0,0,0},
            {0,1,2,1,0},
            {0,0,1,0,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,1,0,0},
            {0,1,2,0,0},
            {0,0,1,0,0},
            {0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0},
            {0,0,1,0,0},
            {0,1,2,1,0},
            {0,0,0,0,0},
            {0,0,0,0,0}
        }
        
    }
};

const int init[7/*kinds*/][4 /*4 rotation*/][2 /*1st is x init, 2nd is y init*/]=
{
    //I
    {
        {2,-2},
        {2,-1},
        {3,-2},
        {2,0}
    },
    //L
    {
        {2,-1},
        {3,-2},
        {3,-1},
        {3,-1}
    },
    //square
    {
        {2,-2},
        {2,-2},
        {2,-2},
        {2,-2}
    },
    //L mirrored
    {
        {2,-1},
        {2,-1},
        {2,-1},
        {2,-2}
    },
    //N
    {
        {2,-1},
        {2,-2},
        {2,-1},
        {2,-1}
    },
    //N mirrored
    {
        {2,-1},
        {2,-2},
        {2,-1},
        {2,-1}
    },
    //T
    {
        {2,-1},
        {2,-2},
        {2,-1},
        {2,-1}
    }
};

const int boundary[7/*kinds*/][4/*rotation*/][3/*left, right, down*/]=
{
    //I
    {
        {-1,5,19},
        {-2,7,17},
        {0,6,19},
        {-2,7,18}
    },
    //L
    {
        {-2,6,18},
        {-1,6,18},
        {-1,7,18},
        {-1,6,19}
    },
    //square
    {
        {-2,6,18},
        {-2,6,18},
        {-2,6,18},
        {-2,6,18}
    },
    //L mirrored
    {
        {-1,7,18},
        {-1,6,19},
        {-2,6,18},
        {-1,6,18}
    },
    //N
    {
        {-2,6,18},
        {-1,6,18},
        {-1,7,18},
        {-1,6,19}
    },
    //N mirrored
    {
        {-2,6,18},
        {-1,6,18},
        {-1,7,18},
        {-1,6,19}
    },
    //T
    {
        {-2,6,18},
        {-1,6,18},
        {-1,7,18},
        {-1,6,19}
    }
};


const SDL_Color colors[8/*color for corresponding types+1 background*/]={
    //I-cyan(0,255,255)
    {0,255,255},
    
    //L-blue(0,0,255)
    {0,0,255},
    
    //square-orange(255,165,0)
    {255,165,0},
    
    //L mirrored-red(255,0,0)
    {255,0,0},
    
    //N-purple(128,0,128)
    {128,0,128},
    
    //N mirrored- lime(0,255,0)
    {0,255,0},
    
    //T-yellow(255,255,0)
    {255,255,0},
    
    //background
    {210,180,140}
};
